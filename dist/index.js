const urls = [
  "https://giphy.com/embed/MXX2jE0MChtYl1AgBe",
  "https://giphy.com/embed/l0MYKDrj6SXHz8YYU",
  "https://giphy.com/embed/WU1VPaonc2HOn6C4M8",
  "https://giphy.com/embed/3ouX5WfD8PLwH5YBNC",
  "https://giphy.com/embed/3oz8xMqXYo5luqLLFK",
  "https://giphy.com/embed/THx0YaYs2iJ25eBog0",
  "https://giphy.com/embed/71HAj9scPhxnggrZ1G",
  "https://giphy.com/embed/JpdvqUB2xeydKPZA0I",
  "https://giphy.com/embed/YjoA5tXi7SkwM",
  "https://giphy.com/embed/fnlOS8i7jIC617J9Jc",
  "https://giphy.com/embed/3o751SMzZ5TjLWInoQ",
  "https://giphy.com/embed/xT4uQDjFtS6yaGO9Dq",
  "https://giphy.com/embed/FUtOLh4CmsXZe",
  "https://giphy.com/embed/l0IyhjkozSEjMPBXq",
  "https://giphy.com/embed/xTcnT1pMZTE9LK3VJe",
  "https://giphy.com/embed/xT9IgwaiuJ8bjWFzfq",
  "https://giphy.com/embed/l3vRc8nQ41AcCmqc0",
  "https://giphy.com/embed/3ojkj9OPFlYoAcv2fg",
  "https://giphy.com/embed/WpCsmhOZiGM2B74f1F"
];

function checkHourLength(part){
  if (parseInt(part) < 10) { part = "0" + (part.split(':')[0]); }
  return part;
}            

function addNumber(num){
  $('#time-guess').val($('#time-guess').val()+num);
  var textInput = $('#time-guess').val();
  if (textInput.length > 4) {
    console.log("length");
    // $('#time-guess').replace(/^0+/, '');
    $('#time-guess').keyup();
  }

}
function clear(){
  $('#time-guess').val('');
}
function backspace(){
  var textVal = $('#time-guess').val();
  $('#time-guess').val(textVal.substring(0,textVal.length - 1));
}




(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by psc-bundle 0.11.4
var PS = {};
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Category = PS["Control.Category"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modifyRef'"] = function (ref) {
    return function (f) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var modifyRef = function (ref) {
      return function (f) {
          return $foreign["modifyRef'"](ref)(function (s) {
              return {
                  state: f(s), 
                  value: Data_Unit.unit
              };
          });
      };
  };
  exports["modifyRef"] = modifyRef;
  exports["newRef"] = $foreign.newRef;
  exports["readRef"] = $foreign.readRef;
  exports["writeRef"] = $foreign.writeRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.setTimeout = function (ms) {
    return function (fn) {
      return function () {
        return setTimeout(fn, ms);
      };
    };
  };

  exports.setInterval = function (ms) {
    return function (fn) {
      return function () {
        return setInterval(fn, ms);
      };
    };
  };
})(PS["Control.Monad.Eff.Timer"] = PS["Control.Monad.Eff.Timer"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqInt = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["ordInt"] = ordInt;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Timer"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  exports["setInterval"] = $foreign.setInterval;
  exports["setTimeout"] = $foreign.setTimeout;
})(PS["Control.Monad.Eff.Timer"] = PS["Control.Monad.Eff.Timer"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };   

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];        
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                                 
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 220, column 1 - line 220, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe"] = maybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var foldM = function (dictMonad) {
      return function (f) {
          return function (a) {
              return $foreign["uncons'"](function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(a);
              })(function (b) {
                  return function (bs) {
                      return Control_Bind.bind(dictMonad.Bind1())(f(a)(b))(function (a$prime) {
                          return foldM(dictMonad)(f)(a$prime)(bs);
                      });
                  };
              });
          };
      };
  };
  exports["foldM"] = foldM;
  exports["range"] = $foreign.range;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";        

  exports.floor = Math.floor;

  exports.remainder = function (n) {
    return function (m) {
      return n % m;
    };
  };                           

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Math"];
  exports["floor"] = $foreign.floor;
  exports["pi"] = $foreign.pi;
  exports["remainder"] = $foreign.remainder;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];      
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 63, column 1 - line 68, column 43: " + [ x.constructor.name ]);
  };
  var floor = function ($3) {
      return unsafeClamp($$Math.floor($3));
  };
  exports["floor"] = floor;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setLineWidth = function(width) {
      return function(ctx) {
          return function() {
              ctx.lineWidth = width;
              return ctx;
          };
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.setLineCapImpl = function(cap) {
      return function(ctx) {
          return function() {
              ctx.lineCap = cap;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
          return ctx;
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
          return ctx;
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.r, a.start, a.end);
              return ctx;
          };
      };
  };

  exports.rotate = function(angle) {
      return function(ctx) {
          return function() {
              ctx.rotate(angle);
              return ctx;
          };
      };
  };

  exports.translate = function(t) {
      return function(ctx) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
              return ctx;
          };
      };
  };

  exports.setTextAlignImpl = function(ctx) {
      return function(textAlign) {
          return function() {
              ctx.textAlign = textAlign;
              return ctx;
          }
      }
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(fontspec) {
      return function(ctx) {
          return function() {
              ctx.font = fontspec;
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.createRadialGradient = function(radialGradient) {
      return function(ctx) {
          return function() {
              return ctx.createRadialGradient(radialGradient.x0, radialGradient.y0, radialGradient.r0, radialGradient.x1, radialGradient.y1, radialGradient.r1);
          };
      };
  };

  exports.addColorStop = function(stop) {
      return function(color) {
          return function(gradient) {
              return function() {
                  gradient.addColorStop(stop, color);
                  return gradient;
              };
          };
      };
  };

  exports.setGradientFillStyle = function(gradient) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = gradient;
              return ctx;
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var AlignLeft = (function () {
      function AlignLeft() {

      };
      AlignLeft.value = new AlignLeft();
      return AlignLeft;
  })();
  var AlignRight = (function () {
      function AlignRight() {

      };
      AlignRight.value = new AlignRight();
      return AlignRight;
  })();
  var AlignCenter = (function () {
      function AlignCenter() {

      };
      AlignCenter.value = new AlignCenter();
      return AlignCenter;
  })();
  var AlignStart = (function () {
      function AlignStart() {

      };
      AlignStart.value = new AlignStart();
      return AlignStart;
  })();
  var AlignEnd = (function () {
      function AlignEnd() {

      };
      AlignEnd.value = new AlignEnd();
      return AlignEnd;
  })();
  var Round = (function () {
      function Round() {

      };
      Round.value = new Round();
      return Round;
  })();
  var Square = (function () {
      function Square() {

      };
      Square.value = new Square();
      return Square;
  })();
  var Butt = (function () {
      function Butt() {

      };
      Butt.value = new Butt();
      return Butt;
  })();
  var strokePath = function (ctx) {
      return function (path) {
          return function __do() {
              var v = $foreign.beginPath(ctx)();
              var v1 = path();
              var v2 = $foreign.stroke(ctx)();
              return v1;
          };
      };
  }; 
  var setTextAlign = function (ctx) {
      return function (textalign) {
          var toString = function (v) {
              if (v instanceof AlignLeft) {
                  return "left";
              };
              if (v instanceof AlignRight) {
                  return "right";
              };
              if (v instanceof AlignCenter) {
                  return "center";
              };
              if (v instanceof AlignStart) {
                  return "start";
              };
              if (v instanceof AlignEnd) {
                  return "end";
              };
              throw new Error("Failed pattern match at Graphics.Canvas line 513, column 5 - line 514, column 5: " + [ v.constructor.name ]);
          };
          return $foreign.setTextAlignImpl(ctx)(toString(textalign));
      };
  };
  var setLineCap = function (v) {
      if (v instanceof Round) {
          return $foreign.setLineCapImpl("round");
      };
      if (v instanceof Square) {
          return $foreign.setLineCapImpl("square");
      };
      if (v instanceof Butt) {
          return $foreign.setLineCapImpl("butt");
      };
      throw new Error("Failed pattern match at Graphics.Canvas line 233, column 1 - line 234, column 1: " + [ v.constructor.name ]);
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var fillPath = function (ctx) {
      return function (path) {
          return function __do() {
              var v = $foreign.beginPath(ctx)();
              var v1 = path();
              var v2 = $foreign.fill(ctx)();
              return v1;
          };
      };
  };
  exports["Round"] = Round;
  exports["Square"] = Square;
  exports["Butt"] = Butt;
  exports["AlignLeft"] = AlignLeft;
  exports["AlignRight"] = AlignRight;
  exports["AlignCenter"] = AlignCenter;
  exports["AlignStart"] = AlignStart;
  exports["AlignEnd"] = AlignEnd;
  exports["fillPath"] = fillPath;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["setLineCap"] = setLineCap;
  exports["setTextAlign"] = setTextAlign;
  exports["strokePath"] = strokePath;
  exports["addColorStop"] = $foreign.addColorStop;
  exports["arc"] = $foreign.arc;
  exports["createRadialGradient"] = $foreign.createRadialGradient;
  exports["fillText"] = $foreign.fillText;
  exports["getCanvasHeight"] = $foreign.getCanvasHeight;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["lineTo"] = $foreign.lineTo;
  exports["moveTo"] = $foreign.moveTo;
  exports["rotate"] = $foreign.rotate;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setFont"] = $foreign.setFont;
  exports["setGradientFillStyle"] = $foreign.setGradientFillStyle;
  exports["setLineWidth"] = $foreign.setLineWidth;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["translate"] = $foreign.translate;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];        
  var time = function (hours) {
      return function (minutes) {
          return {
              hours: hours, 
              minutes: minutes
          };
      };
  };
  var frameLength = 3;
  var eqTime = function (time1) {
      return function (time2) {
          return time1.hours === time2.hours && time1.minutes === time2.minutes;
      };
  };
  var drawNumber_min = function (radius) {
      return function (ctx) {
          return function (i) {
              var angle = (Data_Int.toNumber(i) * $$Math.pi) / 6.0;
              return function __do() {
                  var v = Graphics_Canvas.rotate(angle)(ctx)();
                  var v1 = Graphics_Canvas.translate({
                      translateX: 0.0, 
                      translateY: -radius * 0.65
                  })(ctx)();
                  var v2 = Graphics_Canvas.rotate(-angle)(ctx)();
                  var v3 = Graphics_Canvas.fillText(ctx)(Data_Show.show(Data_Show.showInt)(i)*5)(0.0)(radius * 5.0e-2)();
                  var v4 = Graphics_Canvas.rotate(angle)(ctx)();
                  var v5 = Graphics_Canvas.translate({
                      translateX: 0.0, 
                      translateY: radius * 0.65
                  })(ctx)();
                  var v6 = Graphics_Canvas.rotate(-angle)(ctx)();
                  return ctx;
              };
          };
      };
  };
  var drawNumbers_min = function (radius) {
      return function (ctx) {
          return function __do() {
              var v = Graphics_Canvas.setFillStyle("#E5Efff")(ctx)();
              var v1 = Graphics_Canvas.setFont(Data_Show.show(Data_Show.showNumber)(radius * 0.15) + "px arial")(ctx)();
              var v2 = Graphics_Canvas.setTextAlign(ctx)(Graphics_Canvas.AlignCenter.value)();
              var v3 = Data_Array.foldM(Control_Monad_Eff.monadEff)(drawNumber_min(radius))(ctx)(Data_Array.range(1)(12))();
              return ctx;
          };
      };
  };

  var drawNumber = function (radius) {
      return function (ctx) {
          return function (i) {
              var angle = (Data_Int.toNumber(i) * $$Math.pi) / 6.0;
              return function __do() {
                  var v = Graphics_Canvas.rotate(angle)(ctx)();
                  var v1 = Graphics_Canvas.translate({
                      translateX: 0.0, 
                      translateY: -radius * 0.85
                  })(ctx)();
                  var v2 = Graphics_Canvas.rotate(-angle)(ctx)();
                  var v3 = Graphics_Canvas.fillText(ctx)(Data_Show.show(Data_Show.showInt)(i))(0.0)(radius * 5.0e-2)();
                  var v4 = Graphics_Canvas.rotate(angle)(ctx)();
                  var v5 = Graphics_Canvas.translate({
                      translateX: 0.0, 
                      translateY: radius * 0.85
                  })(ctx)();
                  var v6 = Graphics_Canvas.rotate(-angle)(ctx)();
                  return ctx;
              };
          };
      };
  };

  var drawNumbers = function (radius) {
      return function (ctx) {
          return function __do() {
              var v = Graphics_Canvas.setFillStyle("#333")(ctx)();
              var v1 = Graphics_Canvas.setFont(Data_Show.show(Data_Show.showNumber)(radius * 0.15) + "px arial")(ctx)();
              var v2 = Graphics_Canvas.setTextAlign(ctx)(Graphics_Canvas.AlignCenter.value)();
              var v3 = Data_Array.foldM(Control_Monad_Eff.monadEff)(drawNumber(radius))(ctx)(Data_Array.range(1)(12))();
              return ctx;
          };
      };
  };
  var drawHand = function (radius) {
      return function (angle) {
          return function (length) {
              return function (width) {
                  return function (ctx) {
                      return function __do() {
                          var v = Graphics_Canvas.strokePath(ctx)(function __do() {
                              var v = Graphics_Canvas.setLineWidth(width)(ctx)();
                              var v1 = Graphics_Canvas.setLineCap(Graphics_Canvas.Round.value)(ctx)();
                              var v2 = Graphics_Canvas.moveTo(ctx)(0.0)(0.0)();
                              var v3 = Graphics_Canvas.rotate(angle)(ctx)();
                              var v4 = Graphics_Canvas.lineTo(ctx)(0.0)(-length)();
                              var v5 = Graphics_Canvas.rotate(-angle)(ctx)();
                              return Data_Unit.unit;
                          })();
                          return ctx;
                      };
                  };
              };
          };
      };
  };
  var drawHands = function (radius) {
      return function (v) {
          return function (ctx) {
              var minute = $$Math.remainder(Data_Int.toNumber(v.minutes))(60.0);
              var minuteAngle = (minute * $$Math.pi) / 30.0;
              var hour = $$Math.remainder(Data_Int.toNumber(v.hours))(12.0);
              // var hour = $$Math.remainder(Data_Int.toNumber(v.hours))(12.0);
              var hourAngle = (hour * $$Math.pi) / 6.0 + (minute * $$Math.pi) / (6.0 * 60.0);
              return function __do() {
                  var v1 = Graphics_Canvas.setStrokeStyle("#333")(ctx)();
                  var v2 = drawHand(radius)(hourAngle)(radius * 0.5)(radius * 7.0e-2)(ctx)();
                  var v3 = drawHand(radius)(minuteAngle)(radius * 0.8)(radius * 7.0e-2)(ctx)();
                  return ctx;
              };
          };
      };
  };
  function getRandomColor() {
  var letters = '0123456789ABCDEF';
  var color = '#352';
  for (var i = 0; i < 3; i++) {
    color += letters[Math.floor(Math.random() * 16)];
  }
  return color;
}

  var drawFace = function (radius) {
      return function (ctx) {
          return function __do() {
              var v = Graphics_Canvas.fillPath(ctx)(function __do() {
                  var v = Graphics_Canvas.createRadialGradient({
                      x0: 0.0, 
                      y0: 0.0, 
                      r0: radius * 1, 
                      x1: 0.0, 
                      y1: 0.0, 
                      r1: radius * 1.45
                  })(ctx)();
                  var v1 = Graphics_Canvas.addColorStop(0.4)(getRandomColor())(v)();
                  var v2 = Graphics_Canvas.addColorStop(0.5)(getRandomColor())(v1)();
                  var v3 = Graphics_Canvas.addColorStop(1.0)(getRandomColor())(v2)();
                  var v4 = Graphics_Canvas.setGradientFillStyle(v3)(ctx)();
                  var v5 = Graphics_Canvas.arc(ctx)({
                      x: 0.0, 
                      y: 0.0, 
                      r: radius * 1.05, 
                      start: 0.0, 
                      end: 2.0 * $$Math.pi
                  })();
                  return Data_Unit.unit;
              })();
              var v1 = Graphics_Canvas.fillPath(ctx)(function __do() {
                  var v1 = Graphics_Canvas.setFillStyle("white")(ctx)();
                  var v2 = Graphics_Canvas.arc(ctx)({
                      x: 0.0, 
                      y: 0.0, 
                      r: radius * 0.95, 
                      start: 0.0, 
                      end: 2.0 * $$Math.pi
                  })();
                  return Data_Unit.unit;
              })();
              var v2 = Graphics_Canvas.fillPath(ctx)(function __do() {
                  var v2 = Graphics_Canvas.setFillStyle("#333")(ctx)();
                  var v3 = Graphics_Canvas.arc(ctx)({
                      x: 0.0, 
                      y: 0.0, 
                      r: radius * 0.1, 
                      start: 0.0, 
                      end: 2.0 * $$Math.pi
                  })();
                  return Data_Unit.unit;
              })();
              return ctx;
          };
      };
  };
  var renderClock = function (time1) {
      return function (height) {
          return function (ctx) {
              var radius = (height / 2.0) * 0.9;
              var center = height / 2.0;
              return function __do() {
                  var v = Graphics_Canvas.translate({
                      translateX: center, 
                      translateY: center
                  })(ctx)();
                  var v1 = drawFace(radius)(ctx)();
                  var v2 = drawNumbers(radius)(ctx)();
                  var vxx = drawNumbers_min(radius)(ctx)();
                  
                  var v3 = drawHands(radius)(time1)(ctx)();
                  var v4 = Graphics_Canvas.translate({
                      translateX: -center, 
                      translateY: -center
                  })(ctx)();
                  return ctx;
              };
          };
      };
  };
  var differenceInMinutes = function (from) {
      return function (to) {
          var toMinutes = (to.hours * 60 | 0) + to.minutes | 0;
          var fromMinutes = (from.hours * 60 | 0) + from.minutes | 0;
          var forwardOnly = function (x) {
              if (x < 0) {
                  return x + (12 * 60 | 0) | 0;
              };
              if (Data_Boolean.otherwise) {
                  return x;
              };
              throw new Error("Failed pattern match at Clock line 31, column 5 - line 36, column 34: " + [ x.constructor.name ]);
          };
          return forwardOnly(toMinutes - fromMinutes | 0);
      };
  };
  var addOneMinute = function (v) {
      if (v.hours === 12 && v.minutes === 59) {
          return {
              hours: 1, 
              minutes: 0
          };
      };
      if (v.minutes === 59) {
          return {
              hours: v.hours + 1 | 0, 
              minutes: 0
          };
      };
      var $69 = {};
      for (var $70 in v) {
          if ({}.hasOwnProperty.call(v, $70)) {
              $69[$70] = v[$70];
          };
      };
      $69.minutes = v.minutes + 1 | 0;
      return $69;
  };
  var animateTo = function (from) {
      return function (to) {
          return function (height) {
              return function (ctx) {
                  var scheduleNextFrame = function (currentRef) {
                      return function (remainingTicksRef) {
                          return function __do() {
                              var v = Control_Monad_Eff_Ref.readRef(remainingTicksRef)();
                              var v1 = (function () {
                                  var $73 = v > 0;
                                  if ($73) {
                                      return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff_Timer.setTimeout(frameLength)(advanceTime(currentRef)(remainingTicksRef)));
                                  };
                                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                              })()();
                              return Data_Unit.unit;
                          };
                      };
                  };
                  var advanceTime = function (currentRef) {
                      return function (remainingTicksRef) {
                          return function __do() {
                              var v = Control_Monad_Eff_Ref.modifyRef(currentRef)(addOneMinute)();
                              var v1 = Control_Monad_Eff_Ref.readRef(currentRef)();
                              var v2 = Control_Monad_Eff_Ref.modifyRef(remainingTicksRef)(function (x) {
                                  return x - 1 | 0;
                              })();
                              var v3 = Control_Monad_Eff_Ref.readRef(remainingTicksRef)();
                              var v4 = renderClock(v1)(height)(ctx)();
                              var v5 = scheduleNextFrame(currentRef)(remainingTicksRef)();
                              return Data_Unit.unit;
                          };
                      };
                  };
                  return function __do() {
                      var v = Control_Monad_Eff_Ref.newRef(from)();
                      var v1 = differenceInMinutes(from)(to);
                      var v2 = Control_Monad_Eff_Ref.newRef(v1)();
                      var v3 = (function () {
                          var $79 = v1 > 0;
                          if ($79) {
                              return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff_Timer.setTimeout(frameLength)(advanceTime(v)(v2)));
                          };
                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(renderClock(from)(height)(ctx));
                      })()();
                      return Data_Unit.unit;
                  };
              };
          };
      };
  };
  exports["animateTo"] = animateTo;
  exports["eqTime"] = eqTime;
  exports["renderClock"] = renderClock;
  exports["time"] = time;
})(PS["Clock"] = PS["Clock"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.ready = function(func) {
      return function() {
          jQuery(document).ready(func);
      };
  };

  exports.select = function(selector) {
      return function() {
          return jQuery(selector);
      };
  };

  exports.setText = function(text) {
      return function(ob) {
          return function() {
              ob.text(text);
          };
      };
  };

  exports.getValue = function(ob) {
      return function() {
          return ob.val();
      };
  };

  exports.setValue = function(val) {
      return function(ob) {
          return function() {
              ob.val(val);
          };
      };
  };

  exports.toggle = function(ob) {
      return function() {
          ob.toggle();
      };
  };

  exports.setVisible = function(flag) {
      return function(ob) {
          return function() {
              ob.toggle(flag);
          };
      };
  };

  exports.on = function(evt) {
      return function(act) {
          return function(ob) {
              return function() {
                  ob.on(evt, function(e) {
                      act(e)(jQuery(this))();
                  });
              };
          };
      };
  };
})(PS["Control.Monad.Eff.JQuery"] = PS["Control.Monad.Eff.JQuery"] || {});
(function(exports) {
    "use strict";

  exports.unsafeFromForeign = function (value) {
    return value;
  };
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];
  exports["unsafeFromForeign"] = $foreign.unsafeFromForeign;
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Monad.Eff.JQuery"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Data_Foreign = PS["Data.Foreign"];
  var Prelude = PS["Prelude"];
  var hide = $foreign.setVisible(false);
  var display = $foreign.setVisible(true);
  exports["display"] = display;
  exports["hide"] = hide;
  exports["getValue"] = $foreign.getValue;
  exports["on"] = $foreign.on;
  exports["ready"] = $foreign.ready;
  exports["select"] = $foreign.select;
  exports["setText"] = $foreign.setText;
  exports["setValue"] = $foreign.setValue;
})(PS["Control.Monad.Eff.JQuery"] = PS["Control.Monad.Eff.JQuery"] || {});
(function(exports) {
    "use strict";

  exports.random = Math.random;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Random"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var v = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * v + Data_Int.toNumber(low);
              return Data_Int.floor(asNumber);
          };
      };
  };
  exports["randomInt"] = randomInt;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Clock = PS["Clock"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_JQuery = PS["Control.Monad.Eff.JQuery"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var DOM = PS["DOM"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var timeAsDigits = function (v) {
      if (v.minutes === 0) {
          return Data_Show.show(Data_Show.showInt)(v.hours) + ":00";
      };
      return Data_Show.show(Data_Show.showInt)(v.hours) + (":" + Data_Show.show(Data_Show.showInt)(v.minutes));
  };
  var nextHour = function (v) {
      if (v === 12) {
          return 1;
      };
      return v + 1 | 0;
  };
  var hourName = function (v) {
      if (v === 1) {
          return "eitt";
      };
      if (v === 2) {
          return "tvö";
      };
      if (v === 3) {
          return "þrjú";
      };
      if (v === 4) {
          return "fjögur";
      };
      if (v === 5) {
          return "fimm";
      };
      if (v === 6) {
          return "sex";
      };
      if (v === 7) {
          return "sjö";
      };
      if (v === 8) {
          return "átta";
      };
      if (v === 9) {
          return "níu";
      };
      if (v === 10) {
          return "tíu";
      };
      if (v === 11) {
          return "ellefu";
      };
      if (v === 12) {
          return "tólf";
      };
      return "mínútur";
  };
  var timeAsText = function (v) {
      if (v.minutes === 0) {
          return hourName(v.hours) + "";
      };
      if (v.minutes === 15) {
          return "korter yfir " + hourName(v.hours);
      };
      if (v.minutes === 30) {
          return "hálf " + hourName(nextHour(v.hours));
      };
      if (v.minutes === 45) {
          return "korter í " + hourName(nextHour(v.hours));
      };
      return "valami valami";
  };
  var generateRandomTime = function (targetRef) {
      var randomTime = Control_Apply.apply(Control_Monad_Eff.applyEff)(Data_Functor.map(Control_Monad_Eff.functorEff)(Clock.time)(Control_Monad_Eff_Random.randomInt(1)(12)))(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Semiring.mul(Data_Semiring.semiringInt)(15))(Control_Monad_Eff_Random.randomInt(0)(3)));
      return function __do() {
          var v = Control_Monad_Eff_Ref.readRef(targetRef)();
          var v1 = randomTime();
          var v2 = (function () {
              var $66 = Clock.eqTime(v)(v1);
              if ($66) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(generateRandomTime(targetRef));
              };
              return Control_Monad_Eff_Ref.writeRef(targetRef)(v1);
          })()();
          return Control_Monad_Eff_Ref.readRef(targetRef)();
      };
  };
  var displayTimeAsText = function (time) {
      return function __do() {
          var v = Control_Monad_Eff_JQuery.select("#time-digits")();
          var v1 = Control_Monad_Eff_JQuery.setText(timeAsDigits(time))(v)();
          var v2 = Control_Monad_Eff_JQuery.select("#time-text")();
          var v3 = Control_Monad_Eff_JQuery.setText(timeAsText(time))(v2)();
          return Data_Unit.unit;
      };
  };
  var defaultTime = Clock.time(12)(0);
  var animateClock = function (canvasId) {
      return function (from) {
          return function (to) {
              return function __do() {
                  var v = Graphics_Canvas.getCanvasElementById(canvasId)();
                  var __unused = function (dictPartial1) {
                      return function ($dollar45) {
                          return $dollar45;
                      };
                  };
                  return __unused()((function () {
                      if (v instanceof Data_Maybe.Just) {
                          return function __do() {
                              var v1 = Graphics_Canvas.getContext2D(v.value0)();
                              var v2 = Graphics_Canvas.getCanvasHeight(v.value0)();
                              var v3 = Clock.animateTo(from)(to)(v2)(v1)();
                              return Data_Unit.unit;
                          };
                      };
                      throw new Error("Failed pattern match at Main line 32, column 5 - line 32, column 49: " + [ v.constructor.name ]);
                  })())();
              };
          };
      };
  };
  var nextTarget = function (targetRef) {
      return function __do() {
          var v = Control_Monad_Eff_Ref.readRef(targetRef)();
          var v1 = generateRandomTime(targetRef)();
          var v2 = animateClock("quiz-clock")(v)(v1)();
          var v3 = Control_Monad_Eff_JQuery.select("#time-guess")();
          var v4 = Control_Monad_Eff_JQuery.setValue("")(v3)();
          return Data_Unit.unit;
      };
  };
  var correct = function (targetRef) {
      return function __do() {
          // document.getElementByClass('correct-image').innerHTML = "https://giphy.com/embed/3o751SMzZ5TjLWInoQ";
          

          var v = Control_Monad_Eff_JQuery.select(".correct-image")();
          var v1 = Control_Monad_Eff_JQuery.display(v)();
          var v2 = Control_Monad_Eff_Timer.setTimeout(4000)(Control_Monad_Eff_JQuery.hide(v))();
          return nextTarget(targetRef)();
      };
  };
  var makeGuess = function (targetRef) {
      return function (v) {
          return function (inputBox) {
              return function __do() {
  
                  // GIF SHOW SELECTOR
                  $(".correct-image").attr("src", urls[Math.floor(Math.random() * 16)]);
  
                  var v1 = Control_Monad_Eff_JQuery.getValue(inputBox)();
                  
                  // REMOVE LEADING ZERO
                  v1 = v1.replace(/^0+/, '');
                  
                  // 24 HOUR SUPPORT
                  if (parseInt(v1.split(':')[0]) > 12) { 
                    v1 = (v1.split(':')[0] - 12) + ":" + v1.split(':')[1]; 
                  }
                  
                  // console.log(parseInt(v1));
                  var v2 = Data_Foreign.unsafeFromForeign(v1);
                  var v3 = Data_Functor.map(Control_Monad_Eff.functorEff)(timeAsDigits)(Control_Monad_Eff_Ref.readRef(targetRef))();
                  var $80 = v3 === v2;
                  if ($80) {
                      return correct(targetRef)();
                  };
                  return Data_Unit.unit;
              };
          };
      };
  };
  var startQuizClock = function ($$default) {
      return function __do() {
          var v = Control_Monad_Eff_Ref.newRef($$default)();
          var v1 = nextTarget(v)();
          var v2 = Control_Monad_Eff_JQuery.select("#time-guess")();
          var v3 = Control_Monad_Eff_JQuery.on("keyup")(makeGuess(v))(v2)();

          // var hour = v3.split(":")[0];
          // console.log(hour);
          
          return Data_Unit.unit;
      };
  };
  var renderAdvancingClock = function (times) {
      return function __do() {
          var v = Data_Tuple.fst(times);
          var v1 = Data_Tuple.snd(times);
          var v2 = animateClock("advancing-clock")(v)(v1)();
          var v3 = displayTimeAsText(v1)();
          return Data_Unit.unit;
      };
  };
  var advanceTime = function (timeRef) {
      var add = function (v) {
          if (v.hours === 12 && v.minutes === 45) {
              return Clock.time(1)(0);
          };
          if (v.minutes === 45) {
              return Clock.time(v.hours + 1 | 0)(0);
          };
          return Clock.time(v.hours)(v.minutes + 15 | 0);
      };
      return function __do() {
          var v = Control_Monad_Eff_Ref.readRef(timeRef)();
          var v1 = Control_Monad_Eff_Ref.modifyRef(timeRef)(add)();
          var v2 = Control_Monad_Eff_Ref.readRef(timeRef)();
          return new Data_Tuple.Tuple(v, v2);
      };
  };
  var advancePeriodInMilliseconds = 6000;
  var startAdvancingClock = function (startTime) {
      return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
          var v = Control_Monad_Eff_Ref.newRef(startTime)();
          var v1 = renderAdvancingClock(new Data_Tuple.Tuple(startTime, startTime))();
          var v2 = Control_Monad_Eff_Timer.setInterval(advancePeriodInMilliseconds)(Control_Bind.bind(Control_Monad_Eff.bindEff)(advanceTime(v))(renderAdvancingClock))();
          return Data_Unit.unit;
      });
  };
  var main = Control_Monad_Eff_JQuery.ready(function __do() {
      var v = startAdvancingClock(defaultTime)();
      var v1 = startQuizClock(defaultTime)();
      return Data_Unit.unit;
  });
  exports["advancePeriodInMilliseconds"] = advancePeriodInMilliseconds;
  exports["advanceTime"] = advanceTime;
  exports["animateClock"] = animateClock;
  exports["correct"] = correct;
  exports["defaultTime"] = defaultTime;
  exports["displayTimeAsText"] = displayTimeAsText;
  exports["generateRandomTime"] = generateRandomTime;
  exports["hourName"] = hourName;
  exports["main"] = main;
  exports["makeGuess"] = makeGuess;
  exports["nextHour"] = nextHour;
  exports["nextTarget"] = nextTarget;
  exports["renderAdvancingClock"] = renderAdvancingClock;
  exports["startAdvancingClock"] = startAdvancingClock;
  exports["startQuizClock"] = startQuizClock;
  exports["timeAsDigits"] = timeAsDigits;
  exports["timeAsText"] = timeAsText;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();

},{}]},{},[1]);
